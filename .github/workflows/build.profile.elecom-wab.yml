name:
  Build firmware for ELECOM WAB series

permissions:
  actions: write

on:
  schedule:
    - cron: '0 15 * * *'

  workflow_dispatch:

    
jobs:
  build:
    name: Build firmware
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        target: [ath79]
        subtarget: [generic]
        profile: [elecom_wab-i1750-ps]

    steps:
      - name: Check available cached build base
        uses: actions/cache/restore@v4
        with:
          key: ${{ matrix.subtarget }}.${{ matrix.target }}.build-${{ github.run_id }}.${{ github.run_attempt }}
          restore-keys: ${{ matrix.subtarget }}.${{ matrix.target }}.build-
          path: openwrt
          lookup-only: true
          fail-on-cache-miss: true

      - name: Delete unnecessary files
        run: |
          sudo rm -rf /usr/local/lib/android/sdk
          sudo rm -rf /usr/local/share/chromedriver-linux64
          sudo rm -rf /usr/local/share/edge_driver
          sudo rm -rf /usr/local/share/gecko_driver
          sudo rm -rf /usr/share/java/selenium-server.jar
          sudo rm -rf /usr/share/java
          sudo rm -rf /usr/share/miniconda
          sudo rm -rf /usr/local/share/vcpkg

      - name: Remove unnecessary apt packages
        run: sudo apt -y remove --auto-remove --purge aspnet* docker* dotnet* firefox* google* mono* snapd*

      - name: Remove unnecessary apt-installed files
        run: |
          sudo rm -rf /etc/mono/certstore
          sudo rm -rf /usr/lib/mono
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /etc/mono
          sudo rm -rf /usr/libexec/docker
          sudo rm -rf /etc/docker

      - name: Update apt statuses
        run: sudo apt -y update

      - name: Update apt packages
        run: sudo apt -y full-upgrade --auto-remove --purge

      - name: Install prerequisites apt packages
        run: sudo apt -y install b43-fwcutter bash bcc bin86 binutils bzip2 flex g++ gawk gcc gcc-multilib gettext git gzip help2man intltool libboost-dev libelf-dev libncurses-dev libssl-dev libthread-queue-any-perl libusb-dev libxml-parser-perl make openjdk-8-jdk-headless patch perl-modules python3-dev sharutils time unzip util-linux wget xsltproc zip zlib1g-dev zlib1g-dev

      - name: Install requisites apt packages
        run: sudo apt -y install bison build-essential clang file flex g++ g++-multilib gawk gcc-multilib gettext git libncurses-dev libssl-dev python3-distutils rsync unzip wget zlib1g-dev

      - name: apt clean 1 of 3
        run: sudo apt -y autoremove --purge

      - name: apt clean 2 of 3
        run: sudo apt -y autoclean

      - name: apt clean 3 of 3
        run: sudo apt -y clean

      - name: df check
        run: df -h

      - name: Checkout this repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Import cached build base
        uses: actions/cache/restore@v4
        with:
          key: ${{ matrix.subtarget }}.${{ matrix.target }}.build-${{ github.run_id }}.${{ github.run_attempt }}
          restore-keys: ${{ matrix.subtarget }}.${{ matrix.target }}.build-
          path: openwrt

      - name: Import build configuration (target specification)
        working-directory: openwrt
        run: cat ../target_config/${{ matrix.target }}.${{ matrix.subtarget }}.config > .config

      - name: Import build configuration (profile specification)
        working-directory: openwrt
        run: cat ../target_config/${{ matrix.target }}.${{ matrix.subtarget }}.${{ matrix.profile }}.config >> .config

      - name: Apply build configuration
        working-directory: openwrt
        run: make defconfig

      - name: Build firmware
        working-directory: openwrt
        run: make -j$(nproc)

    
#  steps:
#    - name:
#      Download artifacts
#        uses:
#          actions/download-artifact@v4
#
#      - name:
#          Make release
#        run: |
#          ls -laFR
#          set -xe
#          shopt -s nullglob
#          RELDATE="$(date +'%Y-%m-%d %H:%M')"
#          NAME="Auto-Build $RELDATE"
#          TAGNAME="autobuild-$(date +'%Y-%m-%d-%H-%M')"
#          gh release create "$TAGNAME" --repo ${{ github.repository }} --target "main" --title "$NAME" artifact/targets/ath79/generic/*.{bin,buildinfo,json,manifest} artifact/targets/ath79/generic/sha256sums
#          echo "tag_name=${TAGNAME}" >> $GITHUB_OUTPUT
#          echo "rel_date=${RELDATE}" >> $GITHUB_OUTPUT
#        env:
#          GITHUB_TOKEN:
#            ${{ github.token }}
